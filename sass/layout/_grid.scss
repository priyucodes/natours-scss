.row {
  max-width: $grid-width;
  // If we have enough available space then it will have the width that we specified. If theres not enough width (if viewport is smaller than we specified here) then it will fill 100% of the available space that it has.
  // foreg. vw is 600px it will make width 600px
  // background-color: #eee;
  margin: 0 auto; // center a block element inside of another block element.
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }
  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }
  @include clearfix;

  // Attribute selector
  // ^ means beginning(starts With)
  // * select any classes which contains value
  // $ ends with
  [class^='col-'] {
    // background-color: orangered;
    float: left;
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }
    // To make each column take the whole width and push other columns below it
    @include respond(tab-port) {
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    width: calc(
      (100% - #{$gutter-horizontal}) / 2
    ); // can mix units(sass benefit)
  }

  .col-1-of-3 {
    width: calc((100% - #{$gutter-horizontal} * 2) / 3);
  }
  .col-2-of-3 {
    width: calc(
      2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - #{$gutter-horizontal} * 3) / 4);
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - #{$gutter-horizontal} * 3) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - #{$gutter-horizontal} * 3) / 4) + 2 * #{$gutter-horizontal}
    );
  }
}
